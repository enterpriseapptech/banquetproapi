// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator eventcenterclient {
  provider = "prisma-client-js"
  output   = "../../../node_modules/@prisma/catering"
}

datasource banquestproeventsdb {
  provider = "postgresql"
  url      = "postgresql://users_admin:usersPassword@2025@localhost:5432/banquestprocateringdb?schema=public"
}

// event centers

model Catering {
  id                 String        @id @default(uuid()) // Primary key
  serviceProviderId  String // owner of this service points to a userid 
  tagLine            String
  depositAmount      Int
  startPrice         Float
  minCapacity        Int?  //minimum count of people the catering service can handle
  maxCapacity        Int?  //maximum count of people the catering service can handle
  description        String?
  dishTypes          String[]
  cuisine            String[]
  images             String[]
  termsOfUse         String
  cancellationPolicy String
  streetAddress      String
  streetAddress2     String
  city               String
  state              String
  country            String
  location           String
  postal             String
  status             ServiceStatus
  isFeatured         Boolean @default(false)
  featureExpiringAt  DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  updatedBy          String?     
  deletedAt          DateTime?
  deletedBy          String?

  // relations
  menu              Menu[]
  @@index([serviceProviderId, startPrice, city, state, country, status, cuisine])
}

model Menu {
  id               String     @id @default(uuid())
  cateringId       String
  name             String
  description      String?
  images           String[] // array to store the image url
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  updatedBy          String?     
  deletedAt          DateTime?
  deletedBy          String?

  // Relationships
  cateringService   Catering @relation(fields: [cateringId], references: [id])
  @@index([description])
}



enum ServiceStatus {
  ACTIVE
  INACTIVE
}
