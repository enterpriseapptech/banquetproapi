// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator usersclient {
  provider      = "prisma-client-js"
  output        = "@prisma/users"
  binaryTargets = ["native", "linux-musl"] // or "linux-musl" if you're using Alpine
}

datasource banquestprousersdb {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url      = "postgresql://users_admin:9bqq9oTJv8rAQEsrCLfVV2ieql1Jti90@13.61.144.12/banquetprousersdb"
}

model User {
  id              String     @id @default(uuid()) // Primary key
  firstName       String?
  lastName        String?
  email           String     @unique
  isEmailVerified Boolean    @default(false)
  password        String // Hashed password
  userType        UserType // Enum for user type
  status          UserStatus // Account status (e.g., active, suspended)
  refreshToken    String?
  lastLoginAt     DateTime?
  loginAttempts   Int        @default(0) // Number of login attempts
  streetAddress   String?
  streetAddress2  String?
  city            String?
  state           String?
  country         String?
  location        String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deletedAt       DateTime?
  deletedBy       String?

  // Relations
  admin               Admin?
  serviceProvider     ServiceProvider?
  customer            Customer?
  staff               Staff?
  personalAccessToken PersonalAccessTokens[]
  kycVerification     KYCVerification?
  featured            Featured[]
  subscription        Subscription?
  passwordHistory     PasswordHistory[]
}

model Admin {
  id        String     @id @default(uuid()) @map("user_id") // Foreign key to User table tight coupling 
  role      AdminRole? // Role (e.g., superadmin, customer service, etc.)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relation to User
  user User @relation(fields: [id], references: [id])
}

model ServiceProvider {
  id                    String      @id @default(uuid()) @map("user_id") // Foreign key to User table
  businessName          String
  serviceType           ServiceType // Type of service (e.g., catering, event center)
  businessLogo          String? // URL to business logo
  pricingInfo           String? // Pricing details (could be JSON for flexibility)
  regulations           String?
  additionalInformation String?
  workingHours          Json?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  // Relation to User
  user   User    @relation(fields: [id], references: [id])
  // Relation to Staffs
  staffs Staff[]
}

model Customer {
  id                        String   @id @default(uuid()) @map("user_id") // Foreign key to User table
  historyOfServiceProviders String[] // could be used to track returning requests
  preferences               Json? // JSON for customer preferences (e.g., food types, event types)
  referralCode              String? // Referral code (if any)
  profilePicture            String? // URL to profile picture
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  // Relation to User
  user User @relation(fields: [id], references: [id])
}

model Staff {
  id                String   @id @default(uuid()) @map("user_id") // Foreign key to User table
  serviceProviderId String // Foreign key to ServiceProvider
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relation to User
  user User @relation(fields: [id], references: [id])

  // Relation to ServiceProvider
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id])
}

model PasswordHistory {
  id        String    @id @default(uuid()) @map("user_id") // Foreign key to User table
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  user      User      @relation(fields: [id], references: [id], onDelete: Cascade)
}

model PersonalAccessTokens {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  token     String
  type      TokenType
  expiry    DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relation to User
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, type])
}

model Permission {
  id        String    @id @default(uuid())
  role      AdminRole
  action    String // e.g., "READ", "WRITE", "DELETE"
  resource  String // e.g., "POST", "USER"
  condition Json? // Optional: Extra rules (ABAC)
}

// subscription plans
// features of a subscription plan 
/**
 * timeframe, actions,
 */

model SubscriptionPlan {
  id String @id @default(uuid()) @map("user_id")
}

/**
 * KYCVerification - know your cusomers for both proseekers and profixers
 */
model KYCVerification {
  id                       String             @id @default(uuid()) @map("user_id")
  facialVerificationImage  String?
  idCardType               String?
  idNumber                 String?
  expiryDate               DateTime?
  facialVerificationStatus VerificationStatus
  idVerificationStatus     VerificationStatus
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  user                     User               @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Featured {
  id            String    @id @default(uuid())
  paymentId     String // tracks all payments made for a subscription over time, last in the array is the current one
  userId        String    @unique
  featurePlanId String
  // question - will this be tracked by slots or 
  startDate     DateTime  @default(now())
  endDate       DateTime
  createdAt     DateTime  @default(now())
  updatededAt   DateTime  @updatedAt
  updatedBy     String?
  deletedAt     DateTime?
  deletedBy     String?

  user User @relation(fields: [userId], references: [id])
}

// this model tracks subscription for accepting reqest quotes for a period of 
// time regardless of how many quotes were accepted inbetween

model Subscription {
  id                 String             @id @default(uuid()) @map("user_id")
  paymentId          String[] // tracks all payments made for a subscription over time, last in the array is the current one
  subscriptionPlanId String
  status             SUBSCRIPTIONSTATUS
  startDate          DateTime
  endDate            DateTime
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  updatedBy          String?
  deletedAt          DateTime?
  deletedBy          String?

  // relations
  user User @relation(fields: [id], references: [id])
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SUBSCRIPTIONSTATUS {
  ACTIVE
  INACTIVE
}

enum ServiceType {
  EVENTCENTERS
  CATERING
  ALL
}

enum UserType {
  ADMIN
  SERVICE_PROVIDER
  CUSTOMER
  STAFF
}

enum AdminRole {
  SUPERADMIN
  ADMIN
  CUSTOMERSERVICE
}

enum TokenType {
  PASSWORDRESET
  DELETEACCOUNT
  VERIFYACCOUNT
}

enum UserStatus {
  ACTIVE
  DEACTIVATED
  RESTRICTED
}
