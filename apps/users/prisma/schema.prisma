// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url  = "postgresql://users_admin:usersPassword@2025@localhost:5432/banquestprousersdb?schema=public"
}


model User {
  id              String    @id @default(uuid()) // Primary key
  firstName       String? 
  lastName        String? 
  email           String    @unique
  isEmailVerified Boolean   @default(false)
  password        String    // Hashed password
  userType        UserType  // Enum for user type
  status          UserStatus    // Account status (e.g., active, suspended)
  refreshToken    String?
  lastLoginAt     DateTime?
  loginAttempts   Int @default(0) // Number of login attempts
  streetAddress   String?
  streetAddress2  String?
  city            String?
  state           String?
  country         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deleted_at      DateTime?

  // Relations
  admin           Admin? 
  serviceProvider ServiceProvider? 
  customer        Customer?        
  staff           Staff?           
}

model Admin {
  id          String @id @default(uuid()) @map("user_id") // Foreign key to User table tight coupling 
  role        String // Role (e.g., superadmin, customer service, etc.)
  permissions Json   // JSON to store permissions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to User
  user User @relation(fields: [id], references: [id])
}

model ServiceProvider {
  id           String @id @default(uuid()) @map("user_id") // Foreign key to User table
  businessName String
  serviceType  String  // Type of service (e.g., catering, event center)
  businessLogo String? // URL to business logo
  pricingInfo  Json    // Pricing details (could be JSON for flexibility)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relation to User
  user User @relation(fields: [id], references: [id])
  // Relation to Staffs
  staffs Staff[]
}

model Customer {
  id            String @id @default(uuid()) @map("user_id") // Foreign key to User table
  preferences   Json   // JSON for customer preferences (e.g., food types, event types)
  referralCode  String? // Referral code (if any)
  profilePicture String? // URL to profile picture
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relation to User
  user User @relation(fields: [id], references: [id])
}

model Staff {
  id                String @id @default(uuid()) @map("user_id") // Foreign key to User table
  role              String // Role within the service provider (e.g., manager, waiter)
  serviceProviderId String // Foreign key to ServiceProvider
  shiftSchedule     Json   // JSON to manage shift schedules
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relation to User
  user User @relation(fields: [id], references: [id])

  // Relation to ServiceProvider
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id])
}


model PasswordHistory{
  id        String @id @default(uuid()) @map("user_id") // Foreign key to User table
  password  String
  createdAt DateTime @default(now())
}

enum UserType {
  ADMIN
  SERVICE_PROVIDER
  CUSTOMER
  STAFF
}

enum UserStatus {
  ACTIVE
  DEACTIVATED
  RESTRICTED
}