// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator usersclient {
  provider = "prisma-client-js"
  output   = "../../../node_modules/@prisma/users"
}

datasource banquestprousersdb {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url  = "postgresql://users_admin:usersPassword@2025@localhost:5432/banquestprousersdb?schema=public"
}

model User {
  id              String    @id @default(uuid()) // Primary key
  firstName       String? 
  lastName        String? 
  email           String    @unique
  isEmailVerified Boolean   @default(false)
  password        String    // Hashed password
  userType        UserType  // Enum for user type
  status          UserStatus    // Account status (e.g., active, suspended)
  refreshToken    String?
  lastLoginAt     DateTime?
  loginAttempts   Int @default(0) // Number of login attempts
  streetAddress   String?
  streetAddress2  String?
  city            String?
  state           String?
  country         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  deletedBy       String?
  // Relations
  admin           Admin? 
  serviceProvider ServiceProvider? 
  customer        Customer?        
  staff           Staff?  
  personalAccessToken PersonalAccessTokens[]         
}

model Admin {
  id          String @id @default(uuid()) @map("user_id") // Foreign key to User table tight coupling 
  role        AdminRole? // Role (e.g., superadmin, customer service, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to User
  user User @relation(fields: [id], references: [id])
}

model ServiceProvider {
  id           String @id @default(uuid()) @map("user_id") // Foreign key to User table
  businessName String
  serviceType  ServiceType  // Type of service (e.g., catering, event center)
  businessLogo String? // URL to business logo
  pricingInfo  String?    // Pricing details (could be JSON for flexibility)
  regulations  String?   
  additionalInformation String?   
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt


  // Relation to User
  user User @relation(fields: [id], references: [id])
  // Relation to Staffs
  staffs Staff[]
}

model Customer {
  id            String @id @default(uuid()) @map("user_id") // Foreign key to User table
  preferences   Json?   // JSON for customer preferences (e.g., food types, event types)
  referralCode  String? // Referral code (if any)
  profilePicture String? // URL to profile picture
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relation to User
  user User @relation(fields: [id], references: [id])
}

model Staff {
  id                String @id @default(uuid()) @map("user_id") // Foreign key to User table
  serviceProviderId String // Foreign key to ServiceProvider
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relation to User
  user User @relation(fields: [id], references: [id])

  // Relation to ServiceProvider
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id])
}

model PasswordHistory{
  id        String @id @default(uuid()) @map("user_id") // Foreign key to User table
  password  String
  createdAt DateTime @default(now())
}

model PersonalAccessTokens {
  id              String @id @default(uuid()) 
  userId          String  @map("user_id") 
  token           String
  type            TokenType
  expiry          DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deleted_at      DateTime?

  // Relation to User
  user User @relation(fields: [userId], references: [id])
  @@unique([userId, type]) 
}

model Permission {
  id        String  @id @default(uuid())
  role      AdminRole
  action    String  // e.g., "READ", "WRITE", "DELETE"
  resource  String  // e.g., "POST", "USER"
  condition Json?   // Optional: Extra rules (ABAC)
}

enum ServiceType {
  EVENTCENTERS
  CATERING
  ALL
}

enum UserType {
  ADMIN
  SERVICE_PROVIDER
  CUSTOMER
  STAFF
}

enum AdminRole {
  SUPERADMIN
  ADMIN
  CUSTOMERSERVICE
}

enum TokenType {
  PASSWORDRESET
  DELETEACCOUNT
  VERIFYACCOUNT
}

enum UserStatus {
  ACTIVE
  DEACTIVATED
  RESTRICTED
}