// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/@prisma/booking"
  
}

datasource banquestprobookingdb {
  provider = "postgresql"
  url      = "postgresql://users_admin:usersPassword@2025@localhost:5432/banquestprobookingdb?schema=public"
}

model Booking {
  id                    String    @id @default(uuid())
  customerId           String // customer booking the venue, points to an ID on users table
  confirmedBy          String?  // staff who confirmed the book, points to an ID on users table
  confirmedAt           DateTime?
  servicebookingId     String? // eventcenterbooking, catering booking , etc
  serviceType           ServiceType
  totalBeforeDiscount   Float
  discount              Float?
  totalAfterDiscount    Float
  paymentStatus         PaymentStatus
  status                BookingStatus
  bookingDates          String[]  // carries the different dates for a single booking, not a from to, the individual dates
  isTermsAccepted               Boolean
  isCancellationPolicyAccepted  Boolean
  isLiabilityWaiverSigned       Boolean
  bookingReference              String //refernece to find booking fast 
  source                        BookingSource
  serviceNotes                  String?
  customerNotes                 String?
  rescheduledBy                String?
  rescheduledAt                 DateTime?
  previousDates                 String[]
  cancelledBy                   String?  //  whoever cancelled the book, points to an ID on users table
  cancelledAt                    DateTime?
  cancelationReason             String?
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt
  deletedAt                     DateTime?
  deletedBy                     String?  

  @@index([customerId, status, paymentStatus, serviceType])
} // a review must have a booking, booking can have many payments at most 2



enum BookingSource {
  WEB
  MOBILE
  
}



enum ServiceType {
  CATERING
  EVENTCENTER
  
}

enum BookingStatus {
  PENDING
  BOOKED
  RESERVED
  POSTPONED
  CANCELED
}

enum PaymentStatus {
  UNPAID
  FULLY_PAID
  PARTIALLY_PAID
}


// enum PaymentStatus {
//   UNPAID
//   FULLY_PAID
//   PARTIALLY_PAID
//   PENDING_CONFIRMATION
//   PAYMENT_CONFIRMED
// }
